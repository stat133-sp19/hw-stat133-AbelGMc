#' @export
#' @examples
#' bin_mean(10, 0.3)
bin_mean<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_mean(trials,prob))
}
#' @title Binomial Variance
#' @description calculate the variance of the binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return variance of the binomial bino variable
#' @export
#' @examples
#' bin_variance(10, 0.3)
bin_variance<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_variance(trials,prob))
}
#' @title Binomial Mode
#' @description calculate the mode of the binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return mode of Binomial variable
#' @export
#' @examples
#' bin_mode(10, 0.3)
bin_mode<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_mode(trials,prob))
}
#' @title Binomial Skewness
#' @description calculate the skewness of binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return skewness of binomial variable
#' @export
#' @examples
#' bin_skewness(10, 0.3)
bin_skewness<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials,prob))
}
#' @title Binomial Kurtosis
#' @description calculate the kurtosis of binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return Kurtosis of binomial variable
#' @export
#' @examples
#' bin_kurtosis(10, 0.3)
bin_kurtosis<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials,prob))
}
#Private_1
check_prob <- function(prob)
{
if(length(prob)==1&prob<=1&prob>=0)
{
return(TRUE)
}
else
{
stop('invalid prob value')
}
}
#Private 2
check_trials <- function(trials)
{
if(length(trials)==1&trials>=0&(round(trials)==trials))
{
return(TRUE)
}
else{stop('invalid trials value')}
}
#3:check_success
check_success <- function(success,trials)
{
if(sum(success<=trials&success>=0)==length(success))
{return(TRUE)}
else{stop('invalid success value')}
}
library(roxygen2)
library(ggplot2)
#' @title choose function
#' @description calculate n!/(k!(n-k)!)
#' @param n positive integer, n for trials
#' @param k integer, k for success, 0<=k<=n
#' @return how many cases of choosing such success from given trials
#' @export
#' @examples
#' bin_choose(n=5,k=2)
#' bin_choose(5,0)
#' bin_choose(5,1:3)
bin_choose <- function(n,k)
{
if(sum(k>n)==length(sum)){stop('k cannot be greater than n')}
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
#' @title Binomial Probability
#' @description calculate Binomial Probability
#' @param success number of success(may be a vector)
#' @param trials  number of trials
#' @param prob Probablility that a success occurs
#' @return conresponding probability
#' @export
#' @examples
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
#' bin_probability(success = 55, trials = 100, prob = 0.45)
bin_probability<-function(success,trials,prob)
{
check_trials(trials)
check_prob(prob)
check_success(success, trials)
return(bin_choose(trials,success)*prob^success*(1-prob)^(trials-success))
}
#' @title Binomial Distribution
#' @description calculate Binomial distribution
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return data frame with: success; probability distribution
#' @export
#' @examples
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution<-function(trials,prob)
{
bindis<-data.frame(success=0:trials,probability=bin_probability(0:trials,trials,prob))
class(bindis)='bindis'
return(bindis)
}
#plot binomial distribution
#' @export
plot.bindis<-function(bindis)
{
ggplot(bindis,aes(x=success,y=probability))
+geom_col()+labs(x='successes',y='probability')
}
#' @title Binomial Cumulative function
#' @description calculate binomial probability and cumulative function
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return data frame with : success;probability distribution;cumulative probabilities
#' @export
#' @examples
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob)
{
bindis<-data.frame(success=0:trials,probability=bin_probability(0:trials,trials,prob),
cumulative=cumsum(bin_probability(0:trials,trials,prob)))
class(bindis)="bincum"
return(bindis)
}
#plot bincum
#' @export
plot.bincum<-function(bincum)
{
ggplot(bincum,aes(x=success,y=cumulative))+
geom_line()+
geom_point()+labs(x='successes',y='probability')
}
#' @title Binomial Variable
#' @description  generate a binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return a list of binomial variable with trials and probability of success
#' @export
#' @examples
#' bin_variable(trials=5,prob=0.5)
bin_variable<-function(trials,prob)
{
check_prob(prob)
check_trials(trials)
binvar<-list(trials=trials,prob=prob)
class(binvar)='binvar'
return(binvar)
}
#print class binvar
#' @export
print.binvar<-function(binvar)
{
if(!'binvar'%in%class(binvar)){stop('must be class binvar')}
cat("\"Binomial Variable\"\n\n'Parameter\n")
cat(paste('- number of trials:',binvar[[1]],'\n'))
cat(paste('- prob of success :',binvar[[2]]))
}
#Summary class binvar
#' @export
summary.binvar<-function(binvar)
{
if(!'binvar'%in%class(binvar)){stop('must be class binvar')}
ls<-list(
trials=binvar[[1]],
prob=binvar[[2]],
mean=aux_mean(binvar[[1]],binvar[[2]]),
variance=aux_variance(binvar[[1]],binvar[[2]]),
mode=aux_mode(binvar[[1]],binvar[[2]]),
skewness=aux_skewness(binvar[[1]],binvar[[2]]),
kurtosis=aux_kurtosis(binvar[[1]],binvar[[2]])
)
class(ls)<-'summary.binvar'
return(ls)
}
# print for summary.binvar
#' @export
print.summary.binvar<-function(binvar)
{
cat("\"Summary Binomial\"\n\n")
cat('Parameter\n')
cat(paste('- number of trials:',binvar$trials),'\n')
cat(paste('- prob of success :',binvar$prob),'\n\n')
cat('Measure\n')
cat(paste('- mean    :',binvar$mean,'\n'))
cat(paste('- variance:',binvar$variance,'\n'))
cat(paste('- mode    :',binvar$mode,'\n'))
cat(paste('- skewness:',binvar$skewness,'\n'))
cat(paste('- kurtosis:',binvar$kurtosis))
}
#' @title Binomial Mean
#' @description calulate mean of the binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return mean of the binomial variable
#' @export
#' @examples
#' bin_mean(10, 0.3)
bin_mean<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_mean(trials,prob))
}
#' @title Binomial Variance
#' @description calculate the variance of the binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return variance of the binomial bino variable
#' @export
#' @examples
#' bin_variance(10, 0.3)
bin_variance<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_variance(trials,prob))
}
#' @title Binomial Mode
#' @description calculate the mode of the binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return mode of Binomial variable
#' @export
#' @examples
#' bin_mode(10, 0.3)
bin_mode<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_mode(trials,prob))
}
#' @title Binomial Skewness
#' @description calculate the skewness of binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return skewness of binomial variable
#' @export
#' @examples
#' bin_skewness(10, 0.3)
bin_skewness<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials,prob))
}
#' @title Binomial Kurtosis
#' @description calculate the kurtosis of binomial variable
#' @param trials number of trials
#' @param prob Probability that a success occurs
#' @return Kurtosis of binomial variable
#' @export
#' @examples
#' bin_kurtosis(10, 0.3)
bin_kurtosis<-function(trials,prob)
{
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials,prob))
}
expect_error(check_prob(10), 'invalid prob value')
expect_true(check_prob(0.2))
expect_error(check_prob(c(1,2)), 'invalid prob value')
expect_error(check_trials(1.3), 'invalid prob value')
expect_true(check_trials(3))
expect_error(check_trials(c(1,2)), 'invalid prob value')
expect_error(check_trials(-213), 'invalid prob value')
expect_error(check_success(c(-1,2,3,4),5), 'invalid prob value')
expect_true(check_success(c(1,2,3,4,5)),5)
expect_error(check_success(21,5), 'invalid prob value')
expect_equal(aux_mean(5,0.2), 1)
expect_equal(aux_mean(5,0.3), 1.5)
expect_equal(aux_mean(11,1),11)
expect_equal(aux_variance(4,0.5), 1)
expect_equal(aux_variance(8,0.5), 2)
expect_equal(aux_variance(12,0.5),3)
expect_equal(aux_mode(4,0.5), 2)
expect_equal(aux_mode(5,0.5), c(3,2))
expect_equal(aux_mode(5,0.2),1)
expect_equal(aux_skewness(4,0.5), 0)
expect_equal(aux_skewness(5,0.5), 0)
expect_equal(aux_skewness(5,0),Inf)
expect_equal(aux_kurtosis(4,0.5),-0.5)
expect_equal(aux_kurtosis(5,0.5),-0.4)
expect_equal(aux_kurtosis(5,0.2),0.05)
expect_equal(bin_choose(5,1),5)
expect_equal(bin_choose(5,2),10)
expect_equal(bin_choose(5,c(3,4)),c(10,5))
expect_error(bin_choose(5,6),'k cannot be greater than n')
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(2,3,0.5),0.375)
expect_equal(bin_probability(2,2,0.5),0.25)
expect_error(bin_probability(5,2,0.5),'invalid success value')
expect_error(bin_probability(5,2,-0.5),'invalid prob value')
expect_error(bin_probability(2,-2,-0.5),'invalid trials value')
expect_equal(bin_distribution(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_distribution(5,1)$success,0:5)
expect_error(bin_distribution(5,1.2),'invalid prob value')
expect_error(bin_distribution(-1,1.2),'invalid trials value')
expect_equal(bin_cumulative(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_cumulative(5,1)$success,0:5)
expect_equal(bin_cumulative(5,1)$cumulative,c(0,0,0,0,0,1))
expect_error(bin_cumulative(5,1.2),'invalid prob value')
expect_error(bin_cumulative(-1,1.2),'invalid trials value')
check_prob(c(1,2))
p=c(1,2)
length(p)
prob=p
length(prob) == 1 & prob <= 1 & prob >= 0
#Private_1
check_prob <- function(prob)
{
if(length(prob)>1)
{stop('invalid prob value')}
if(prob<=1&prob>=0)
{
return(TRUE)
}
else
{
stop('invalid prob value')
}
}
#Private 2
check_trials <- function(trials)
{
if(length(trials)>1)
{stop('invalid trials value')}
if(trials>=0&(round(trials)==trials))
{
return(TRUE)
}
else{stop('invalid trials value')}
}
#3:check_success
check_success <- function(success,trials)
{
if(sum(success<=trials&success>=0)==length(success))
{return(TRUE)}
else{stop('invalid success value')}
}
expect_error(check_prob(10), 'invalid prob value')
expect_true(check_prob(0.2))
expect_error(check_prob(c(1,2)), 'invalid prob value')
expect_error(check_trials(1.3), 'invalid trials value')
expect_true(check_trials(3))
expect_error(check_trials(c(1,2)), 'invalid trials value')
expect_error(check_trials(-213), 'invalid trials value')
expect_error(check_success(c(-1,2,3,4),5), 'invalid trials value')
expect_true(check_success(c(1,2,3,4,5)),5)
expect_error(check_success(21,5), 'invalid trials value')
expect_equal(aux_mean(5,0.2), 1)
expect_equal(aux_mean(5,0.3), 1.5)
expect_equal(aux_mean(11,1),11)
expect_equal(aux_variance(4,0.5), 1)
expect_equal(aux_variance(8,0.5), 2)
expect_equal(aux_variance(12,0.5),3)
expect_equal(aux_mode(4,0.5), 2)
expect_equal(aux_mode(5,0.5), c(3,2))
expect_equal(aux_mode(5,0.2),1)
expect_equal(aux_skewness(4,0.5), 0)
expect_equal(aux_skewness(5,0.5), 0)
expect_equal(aux_skewness(5,0),Inf)
expect_equal(aux_kurtosis(4,0.5),-0.5)
expect_equal(aux_kurtosis(5,0.5),-0.4)
expect_equal(aux_kurtosis(5,0.2),0.05)
expect_equal(bin_choose(5,1),5)
expect_equal(bin_choose(5,2),10)
expect_equal(bin_choose(5,c(3,4)),c(10,5))
expect_error(bin_choose(5,6),'k cannot be greater than n')
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(2,3,0.5),0.375)
expect_equal(bin_probability(2,2,0.5),0.25)
expect_error(bin_probability(5,2,0.5),'invalid success value')
expect_error(bin_probability(5,2,-0.5),'invalid prob value')
expect_error(bin_probability(2,-2,-0.5),'invalid trials value')
expect_equal(bin_distribution(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_distribution(5,1)$success,0:5)
expect_error(bin_distribution(5,1.2),'invalid prob value')
expect_error(bin_distribution(-1,1.2),'invalid trials value')
expect_equal(bin_cumulative(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_cumulative(5,1)$success,0:5)
expect_equal(bin_cumulative(5,1)$cumulative,c(0,0,0,0,0,1))
expect_error(bin_cumulative(5,1.2),'invalid prob value')
expect_error(bin_cumulative(-1,1.2),'invalid trials value')
expect_error(check_prob(10), 'invalid prob value')
expect_true(check_prob(0.2))
expect_error(check_prob(c(1,2)), 'invalid prob value')
expect_error(check_trials(1.3), 'invalid trials value')
expect_true(check_trials(3))
expect_error(check_trials(c(1,2)), 'invalid trials value')
expect_error(check_trials(-213), 'invalid trials value')
expect_error(check_success(c(-1,2,3,4),5), 'invalid success value')
expect_true(check_success(c(1,2,3,4,5)),5)
expect_error(check_success(21,5), 'invalid success value')
expect_equal(aux_mean(5,0.2), 1)
expect_equal(aux_mean(5,0.3), 1.5)
expect_equal(aux_mean(11,1),11)
expect_equal(aux_variance(4,0.5), 1)
expect_equal(aux_variance(8,0.5), 2)
expect_equal(aux_variance(12,0.5),3)
expect_equal(aux_mode(4,0.5), 2)
expect_equal(aux_mode(5,0.5), c(3,2))
expect_equal(aux_mode(5,0.2),1)
expect_equal(aux_skewness(4,0.5), 0)
expect_equal(aux_skewness(5,0.5), 0)
expect_equal(aux_skewness(5,0),Inf)
expect_equal(aux_kurtosis(4,0.5),-0.5)
expect_equal(aux_kurtosis(5,0.5),-0.4)
expect_equal(aux_kurtosis(5,0.2),0.05)
expect_equal(bin_choose(5,1),5)
expect_equal(bin_choose(5,2),10)
expect_equal(bin_choose(5,c(3,4)),c(10,5))
expect_error(bin_choose(5,6),'k cannot be greater than n')
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(2,3,0.5),0.375)
expect_equal(bin_probability(2,2,0.5),0.25)
expect_error(bin_probability(5,2,0.5),'invalid success value')
expect_error(bin_probability(5,2,-0.5),'invalid prob value')
expect_error(bin_probability(2,-2,-0.5),'invalid trials value')
expect_equal(bin_distribution(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_distribution(5,1)$success,0:5)
expect_error(bin_distribution(5,1.2),'invalid prob value')
expect_error(bin_distribution(-1,1.2),'invalid trials value')
expect_equal(bin_cumulative(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_cumulative(5,1)$success,0:5)
expect_equal(bin_cumulative(5,1)$cumulative,c(0,0,0,0,0,1))
expect_error(bin_cumulative(5,1.2),'invalid prob value')
expect_error(bin_cumulative(-1,1.2),'invalid trials value')
expect_error(check_prob(10), 'invalid prob value')
expect_true(check_prob(0.2))
expect_error(check_prob(c(1,2)), 'invalid prob value')
expect_error(check_trials(1.3), 'invalid trials value')
expect_true(check_trials(3))
expect_error(check_trials(c(1,2)), 'invalid trials value')
expect_error(check_trials(-213), 'invalid trials value')
expect_error(check_success(c(-1,2,3,4),5), 'invalid success value')
expect_true(check_success(c(1,2,3,4,5),5))
expect_error(check_success(21,5), 'invalid success value')
expect_equal(aux_mean(5,0.2), 1)
expect_equal(aux_mean(5,0.3), 1.5)
expect_equal(aux_mean(11,1),11)
expect_equal(aux_variance(4,0.5), 1)
expect_equal(aux_variance(8,0.5), 2)
expect_equal(aux_variance(12,0.5),3)
expect_equal(aux_mode(4,0.5), 2)
expect_equal(aux_mode(5,0.5), c(3,2))
expect_equal(aux_mode(5,0.2),1)
expect_equal(aux_skewness(4,0.5), 0)
expect_equal(aux_skewness(5,0.5), 0)
expect_equal(aux_skewness(5,0),Inf)
expect_equal(aux_kurtosis(4,0.5),-0.5)
expect_equal(aux_kurtosis(5,0.5),-0.4)
expect_equal(aux_kurtosis(5,0.2),0.05)
expect_equal(bin_choose(5,1),5)
expect_equal(bin_choose(5,2),10)
expect_equal(bin_choose(5,c(3,4)),c(10,5))
expect_error(bin_choose(5,6),'k cannot be greater than n')
expect_equal(bin_probability(2,5,0.5),0.3125)
expect_equal(bin_probability(2,3,0.5),0.375)
expect_equal(bin_probability(2,2,0.5),0.25)
expect_error(bin_probability(5,2,0.5),'invalid success value')
expect_error(bin_probability(5,2,-0.5),'invalid prob value')
expect_error(bin_probability(2,-2,-0.5),'invalid trials value')
expect_equal(bin_distribution(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_distribution(5,1)$success,0:5)
expect_error(bin_distribution(5,1.2),'invalid prob value')
expect_error(bin_distribution(-1,1.2),'invalid trials value')
expect_equal(bin_cumulative(5,1)$probability,c(0,0,0,0,0,1))
expect_equal(bin_cumulative(5,1)$success,0:5)
expect_equal(bin_cumulative(5,1)$cumulative,c(0,0,0,0,0,1))
expect_error(bin_cumulative(5,1.2),'invalid prob value')
expect_error(bin_cumulative(-1,1.2),'invalid trials value')
